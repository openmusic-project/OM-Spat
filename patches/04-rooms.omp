; OM File Header - Saved 2013/11/17 1:23:21
; (6.060013 :patc (om-make-point 300 39) (om-make-point 815 208) (om-make-point 1002 698) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sdif) "../../out-files/spat-rooms.sdif") (list (quote :sound) "../../in-files/cowbell.aif" "../../../../../FILES/Audio/white-noise-mn.aif" "../../out-files/spat-rooms.aiff") (list (quote :text) "../../out-files/spat-rooms.txt"))
(in-package :om)(load-lib-for (quote ("OM-Spat")))(setf *om-current-persistent* (om-load-patch1 "04-rooms" (quote ((om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 240 163) (om-make-point 135 30) (list "source 1" "source 2") "(\"source 1\" \"source 2\")" nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 110 612) (om-make-point 70 50) (load-textfile (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "spat-rooms" :type "txt") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 724 377) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 66 26) (quote "Room ID") "" (om-make-point 788 229) nil (om-make-color 0.072398186 0.072398186 0.072398186) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 66 26) (quote "Room ID") "" (om-make-point 593 251) nil (om-make-color 0.072398186 0.072398186 0.072398186) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 836 262) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 809 262) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 874 262) (om-make-point 52 30) 100.0 "100.0" nil) (om-load-editor-box1 "SPAT-ROOM" (quote spat-room) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a unique index identifying the room (int)" "index" 1) (om-load-inputkeyword (quote editor-keyword) "starting time for the early reflections (ms) [1-120]" "early-start" (quote :early-start) 22.22 nil) (om-load-inputkeyword (quote editor-keyword) "ending time for the early reflections (ms) [1-120]" "early-end" (quote :early-end) 39.71 nil))) (om-make-point 769 292) (om-make-point 127 70) (if (find-class (quote spat-room) nil) (let ((array (make-instance (quote spat-room) :numcols 5))) (setf (slot-value array (quote attached-components)) (list nil nil nil nil nil)) (setf (slot-value array (quote times)) (list 0 1 2 3 4)) (setf (slot-value array (quote index)) 2) (setf (slot-value array (quote early-start)) 100) (setf (slot-value array (quote early-end)) 100.0) (setf (slot-value array (quote early-dist)) 0.5) (setf (slot-value array (quote cluster-start)) 42.47) (setf (slot-value array (quote cluster-end)) 105.64) (setf (slot-value array (quote cluster-dist)) 0.5) (setf (slot-value array (quote reverb-start)) 95.37) (setf (slot-value array (quote modal-density)) 0.86) (setf (slot-value array (quote global-decay)) 1.995) (setf (slot-value array (quote low-decay)) 1.0) (setf (slot-value array (quote mid-decay)) 1.0) (setf (slot-value array (quote high-decay)) 0.5) (setf (slot-value array (quote decay-fq-low)) 250) (setf (slot-value array (quote decay-fq-high)) 8000) (setf (lcontrols array) (list)) (setf (data array) (list (list 100 100 100 100 100) (list 100.0 100.0 100.0 100.0 100.0) (list 0.5 0.5 0.5 0.5 0.5) (list 42.47 42.47 42.47 42.47 42.47) (list 105.64 105.64 105.64 105.64 105.64) (list 0.5 0.5 0.5 0.5 0.5) (list 95.37 95.37 95.37 95.37 95.37) (list 0.86 0.86 0.86 0.86 0.86) (list 1.995 1.995 1.995 1.995 1.995) (list 1.0 1.0 1.0 1.0 1.0) (list 1.0 1.0 1.0 1.0 1.0) (list 0.5 0.5 0.5 0.5 0.5) (list 250 250 250 250 250) (list 8000 8000 8000 8000 8000))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 309 276) (om-make-point 335 275) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil t) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 656 253) (om-make-point 27 30) 1 "1" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 30 0)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 683 223) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (30.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 177 78) (quote "Sources can be attached together in a common room, or have their own individual \"virtual\" room.") "" (om-make-point 360 210) nil (om-make-color 0.072398186 0.072398186 0.072398186) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 397 172) (om-make-point 48 30) (list 1 2) "(1 2)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 450 172) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 407 97) (quote "SPAT-ROOM is a TIME-ARRAY defined with a list of times and a unique ID (referred as <room> in the SPAT-MATRIX).$$For the different times of SPAT-ROOM, values can be specified for all the room parameters as defined in the Spat library.") "" (om-make-point 561 91) nil (om-make-color 0.072398186 0.072398186 0.072398186) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SPAT-ROOM" (quote spat-room) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a unique index identifying the room (int)" "index" 1) (om-load-inputkeyword (quote editor-keyword) "modal density of the late reverberation [0.2-4.0]" "modal-density" (quote :modal-density) 0.86 nil))) (om-make-point 605 293) (om-make-point 127 70) (if (find-class (quote spat-room) nil) (let ((array (make-instance (quote spat-room) :numcols 5))) (setf (slot-value array (quote attached-components)) (list nil nil nil nil nil)) (setf (slot-value array (quote times)) (list 0 1 2 3 4)) (setf (slot-value array (quote index)) 1) (setf (slot-value array (quote early-start)) 22.22) (setf (slot-value array (quote early-end)) 39.71) (setf (slot-value array (quote early-dist)) 0.5) (setf (slot-value array (quote cluster-start)) 42.47) (setf (slot-value array (quote cluster-end)) 105.64) (setf (slot-value array (quote cluster-dist)) 0.5) (setf (slot-value array (quote reverb-start)) 95.37) (setf (slot-value array (quote modal-density)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (30.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (setf (slot-value array (quote global-decay)) 1.995) (setf (slot-value array (quote low-decay)) 1.0) (setf (slot-value array (quote mid-decay)) 1.0) (setf (slot-value array (quote high-decay)) 0.5) (setf (slot-value array (quote decay-fq-low)) 250) (setf (slot-value array (quote decay-fq-high)) 8000) (setf (lcontrols array) (list)) (setf (data array) (list (list 22.22 22.22 22.22 22.22 22.22) (list 39.71 39.71 39.71 39.71 39.71) (list 0.5 0.5 0.5 0.5 0.5) (list 42.47 42.47 42.47 42.47 42.47) (list 105.64 105.64 105.64 105.64 105.64) (list 0.5 0.5 0.5 0.5 0.5) (list 95.37 95.37 95.37 95.37 95.37) (list 29.999999 22.5 14.999999 7.4999995 0.0) (list 1.995 1.995 1.995 1.995 1.995) (list 1.0 1.0 1.0 1.0 1.0) (list 1.0 1.0 1.0 1.0 1.0) (list 0.5 0.5 0.5 0.5 0.5) (list 250 250 250 250 250) (list 8000 8000 8000 8000 8000))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 309 276) (om-make-point 335 275) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil t) (om-load-boxcall (quote genfun) "OUTFILE 3" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 29 411) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1 377) (om-make-point 119 30) "spat-rooms.sdif" "\"spat-rooms.sdif\"" nil) (om-load-boxcall (quote genfun) "SAVE-SPAT-SDIF" (quote save-spat-sdif) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "output SDIF file name" "out" (quote :out) nil nil) (om-load-inputkeyword (quote input-keyword) "room(s) descriptions" "rooms" (quote :rooms) nil nil))) (om-make-point 84 473) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 415 38) (quote "Sources in the SPAT-MATRIX can be attached to specific room descriptions using the <room> parameter") "" (om-make-point 454 25) nil (om-make-color 0.072398186 0.072398186 0.072398186) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 177 39) (quote "Spat Rooms") "" (om-make-point 84 7) nil (om-make-color 6/85 14/85 106/255) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 180 139) nil nil nil nil 1) (om-load-editor-box1 "cowbell.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 178 72) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "cowbell" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 577 283) (om-make-point 894 328) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 314 114) nil nil nil nil 1) (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "Z-POINTS" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "DECIMALS" 0))) (om-make-point 345 44) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) newobj) "x" nil (pairlis (quote (picture mode winpos winsize)) (list nil 0 (om-make-point 600 200) (om-make-point 800 800))) t nil nil nil) (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "Z-POINTS" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "DECIMALS" 0))) (om-make-point 280 45) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) newobj) "x" nil (pairlis (quote (picture mode winpos winsize)) (list nil 0 (om-make-point 600 200) (om-make-point 800 800))) t nil nil nil) (om-load-editor-box1 "white-noise-mn.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 91 72) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "bresson" "FILES" "Audio")) :device nil :host nil :name "white-noise-mn" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "white-noise-mn.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 413 390) (om-make-point 774 491) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "spat-rooms.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 293 559) (om-make-point 200 72) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "spat-rooms" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "spat-rooms.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1216 896) (om-make-point 414 260) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 375 338) (om-make-point 117 30) "spat-rooms.aiff" "\"spat-rooms.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE 3" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 409 368) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SPAT-SYNTH" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "OUTPUT" 2) (om-load-inputkeyword (quote input-keyword) "" "out-path" (quote :out-path) nil nil) (om-load-inputkeyword (quote input-keyword) "room description(s)" "rooms" (quote :rooms) nil nil))) (om-make-point 387 473) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 209 172) (om-make-point 28 30) 10 "10" nil) (om-load-editor-box1 "spat-rooms.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil))) (om-make-point 95 538) (om-make-point 62 63) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "spat-rooms" :type "sdif")))) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 742 642) (om-make-point 257 361))) nil nil nil t) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 134 161) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "SPAT-MATRIX" (quote spat-matrix) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputkeyword (quote editor-keyword) "" "sounds" (quote :sounds) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durations" (quote :durations) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "src-names" (quote :src-names) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "trajectories" (quote :trajectories) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "room" (quote :room) 1 nil))) (om-make-point 97 204) (om-make-point 251 129) (if (find-class (quote spat-matrix) nil) (let ((array (make-instance (quote spat-matrix) :numcols 2))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote sounds)) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "bresson" "FILES" "Audio")) :device nil :host nil :name "white-noise-mn" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "white-noise-mn.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "cowbell" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj))) (setf (slot-value array (quote src-names)) (list "source 1" "source 2")) (setf (slot-value array (quote trajectories)) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) newobj))) (setf (slot-value array (quote durations)) 10) (setf (slot-value array (quote onsets)) nil) (setf (slot-value array (quote orientations)) nil) (setf (slot-value array (quote apertures)) nil) (setf (slot-value array (quote presence)) 90) (setf (slot-value array (quote warmth)) 30) (setf (slot-value array (quote brillance)) 30) (setf (slot-value array (quote room-presence)) 48) (setf (slot-value array (quote running-reverberance)) 34) (setf (slot-value array (quote envelopment)) 24) (setf (slot-value array (quote omni-filter)) (list 0 1.7 0 -3.8 177 5657)) (setf (slot-value array (quote axis-filter)) (list 0 0 0 0 177 5657)) (setf (slot-value array (quote room)) (list 1 2)) (setf (lcontrols array) (list)) (setf (data array) (list (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "bresson" "FILES" "Audio")) :device nil :host nil :name "white-noise-mn" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "white-noise-mn.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "cowbell" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj)) (list "source 1" "source 2") (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) newobj)) (list 10 10) (list nil nil) (list nil nil) (list nil nil) (list 90 90) (list 30 30) (list 30 30) (list 48 48) (list 34 34) (list 24 24) (list 0 1.7) (list 0 0) (list 1 2))) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 988 465) (om-make-point 567 637))) t nil nil nil))) (quote ((32 0 1 0 nil 0) (15 0 2 0 nil 0) (8 0 2 1 nil 0) (6 0 8 2 nil 0) (5 0 8 3 nil 0) (7 0 8 4 nil 0) (9 0 15 2 nil 0) (10 0 15 3 nil 0) (17 0 16 0 nil 0) (34 0 18 0 nil 0) (16 0 18 1 nil 0) (2 0 18 2 nil 0) (26 0 21 0 nil 0) (22 0 21 1 nil 0) (25 0 23 0 nil 0) (24 0 23 1 nil 0) (30 0 27 0 nil 0) (28 0 29 0 nil 0) (34 0 30 0 nil 0) (29 0 30 2 nil 0) (2 0 30 3 nil 0) (18 0 32 0 nil 0) (33 0 34 1 nil 0) (21 0 34 2 nil 0) (31 0 34 3 nil 0) (0 0 34 4 nil 0) (23 0 34 5 nil 0) (12 0 34 6 nil 0))) nil 6.060013))
