; OM File Header - Saved 2013/11/17 1:44:53
; (6.070006 :patc (om-make-point 300 39) (om-make-point 567 22) (om-make-point 1113 800) "" 183 0 nil "2013/11/17 1:44:53")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/cowbell.aif\"" "#P\"../../in-files/Bassclarinet1.aif\""))
(in-package :om)(load-lib-for (quote ("OM-Spat")))(setf *om-current-persistent* (om-load-patch1 "03-spat-synth" (quote ((om-load-editor-box1 "" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 11 507) (om-make-point 70 66) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (player)) (list (quote :spat-sdif-player))) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 139 82) (quote "[See Spat-SDIF-Player for the OSC streaming of saved trajectory data to real-tume environments]") "" (om-make-point 6 638) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 136 68) (quote "SAVE-SPAT-SDIF:$Save your scene description as an SDIF file") "" (om-make-point 5 573) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OUTFILE 3" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 239 471) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 213 439) (om-make-point 127 30) "spat-binaural.aiff" "\"spat-binaural.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE 3" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 130 373) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 98 339) (om-make-point 111 30) "spat-test2.sdif" "\"spat-test2.sdif\"" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 238 156) (om-make-point 64 30) (list 1.0 0.0) "(1.0 0.0)" nil) (om-load-boxcall (quote genfun) "SAVE-SPAT-SDIF" (quote save-spat-sdif) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "output SDIF file name" "out" (quote :out) nil nil))) (om-make-point 4 426) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 292 53) (quote "binaural rendering: use the defaukt HRTF (see Spat options in OM preferences) or use the <hrtf> input to choose another HRTF file") "" (om-make-point 383 638) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 173 636) (om-make-point 200 72) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 414 260) (om-make-point 1216 896) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "SPAT-SYNTH" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "OUTPUT" 2) (om-load-inputkeyword (quote input-keyword) "" "out-path" (quote :out-path) nil nil) (om-load-inputkeyword (quote input-keyword) "type of spatialization" "panning-type" (quote :panning-type) (quote binaural) (list (list "angular" (quote angular)) (list "vbap" (quote vbap)) (list "binaural" (quote binaural)))))) (om-make-point 191 570) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "4 channels") "" (om-make-point 688 440) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 137 47) (quote "change the default speakers positions") "" (om-make-point 922 345) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "2 channels") "" (om-make-point 469 437) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 880 339) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-4 -2 2 4)) (quote (-2 3 3 -2)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 597 384) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "SPAT-SYNTH" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "OUTPUT" 2) (om-load-inputkeyword (quote input-keyword) "" "out-path" (quote :out-path) nil nil))) (om-make-point 852 436) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OUTFILE 3" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 970 428) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 939 392) (om-make-point 110 30) "spat-test4b.aiff" "\"spat-test4b.aiff\"" nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 776 518) (om-make-point 200 72) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 414 324) (om-make-point 1216 896) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 538 516) (om-make-point 200 72) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 414 324) (om-make-point 1216 896) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 662 343) (om-make-point 103 30) "spat-test4.aiff" "\"spat-test4.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE 3" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 690 378) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SPAT-SYNTH" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "OUTPUT" 2) (om-load-inputkeyword (quote input-keyword) "" "out-path" (quote :out-path) nil nil))) (om-make-point 615 436) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 641 398) (om-make-point 21 30) 4 "4" nil) (om-load-boxcomment "comment" (om-make-point 415 38) (quote "In order to run the Spat renderer, first authorize Ircam Forum software on your computer") "" (om-make-point 478 73) nil (om-make-color 0.5927602 0.13964813 0.17829338) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 177 39) (quote "Spat Renderer") "" (om-make-point 449 12) nil (om-make-color 6/85 14/85 106/255) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 148 44) (quote "Input 2 = number of speakers (channels)") "" (om-make-point 394 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 342 60) (quote "SPAT-SYNTH:$Synthesizes a multipcahnel sound file from an SDIF file or SPAT-MATRIX using Spat$") "" (om-make-point 448 198) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 176 137) nil nil nil nil 1) (om-load-editor-box1 "cowbell.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 193 70) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "cowbell" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 894 328) (om-make-point 577 283) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 332 141) nil nil nil nil 1) (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "Z-POINTS" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "DECIMALS" 0))) (om-make-point 363 71) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) "x" nil (pairlis (quote (winsize winpos mode picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 nil)) t nil nil nil) (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "Z-POINTS" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "DECIMALS" 0))) (om-make-point 298 72) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) "x" nil (pairlis (quote (winsize winpos mode picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 nil)) t nil nil nil) (om-load-editor-box1 "Bassclarinet1.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 109 71) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Bassclarinet1" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 774 491) (om-make-point 413 390) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 401 399) (om-make-point 21 30) 2 "2" nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 300 516) (om-make-point 200 72) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 414 260) (om-make-point 1216 896) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 419 352) (om-make-point 103 30) "spat-test2.aiff" "\"spat-test2.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE 3" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 447 378) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SPAT-SYNTH" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "OUTPUT" 2) (om-load-inputkeyword (quote input-keyword) "" "out-path" (quote :out-path) nil nil))) (om-make-point 375 438) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 209 156) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 101 147) (om-make-point 21 30) 2 "2" nil) (om-load-editor-box1 "SPAT-MATRIX" (quote spat-matrix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputkeyword (quote editor-keyword) "" "sounds" (quote :sounds) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durations" (quote :durations) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "onsets" (quote :onsets) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "trajectories" (quote :trajectories) nil nil))) (om-make-point 61 194) (om-make-point 251 129) (if (find-class (quote spat-matrix) nil) (let ((array (make-instance (quote spat-matrix) :numcols 2))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote sounds)) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Bassclarinet1" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "cowbell" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj))) (setf (slot-value array (quote src-names)) nil) (setf (slot-value array (quote trajectories)) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj))) (setf (slot-value array (quote durations)) 10) (setf (slot-value array (quote onsets)) (list 1.0 0.0)) (setf (slot-value array (quote orientations)) nil) (setf (slot-value array (quote apertures)) nil) (setf (slot-value array (quote presence)) 90) (setf (slot-value array (quote warmth)) 30) (setf (slot-value array (quote brillance)) 30) (setf (slot-value array (quote room-presence)) 48) (setf (slot-value array (quote running-reverberance)) 34) (setf (slot-value array (quote envelopment)) 24) (setf (slot-value array (quote omni-filter)) (list 0 1.7 0 -3.8 177 5657)) (setf (slot-value array (quote axis-filter)) (list 0 0 0 0 177 5657)) (setf (slot-value array (quote room)) 1) (setf (lcontrols array) (list)) (setf (data array) (list (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Bassclarinet1" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "cowbell" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj)) (list nil nil) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj)) (list 10 10) (list 1.0 0.0) (list nil nil) (list nil nil) (list 90 90) (list 30 30) (list 30 30) (list 48 48) (list 34 34) (list 24 24) (list 0 1.7) (list 0 0) (list 1 1))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 567 563) (om-make-point 988 465) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "group 1" (list 0 (quote t)) (list 1 nil) (list 2 (quote t))) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil nil))) (quote ((8 0 0 0 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (42 0 8 0 nil 0) (5 0 8 1 nil 0) (11 0 10 0 nil 0) (42 0 11 0 nil 0) (3 0 11 2 nil 0) (42 0 16 0 nil 0) (15 0 16 1 nil 0) (17 0 16 2 nil 0) (18 0 17 0 nil 0) (16 0 19 0 nil 0) (23 0 20 0 nil 0) (21 0 22 0 nil 0) (42 0 23 0 nil 0) (24 0 23 1 nil 0) (22 0 23 2 nil 0) (34 0 29 0 nil 0) (30 0 29 1 nil 0) (33 0 31 0 nil 0) (32 0 31 1 nil 0) (39 0 36 0 nil 0) (37 0 38 0 nil 0) (42 0 39 0 nil 0) (35 0 39 1 nil 0) (38 0 39 2 nil 0) (41 0 42 1 nil 0) (29 0 42 2 nil 0) (40 0 42 3 nil 0) (7 0 42 4 nil 0) (31 0 42 5 nil 0))) nil 6.070006))